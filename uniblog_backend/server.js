require("dotenv").config();
const express = require("express");
const jwt = require("jsonwebtoken");
const cors = require("cors");
const fs = require("fs");

const app = express();
app.use(express.json());
app.use(cors());

const usersFile = "users.json";

// ðŸ“Œ KullanÄ±cÄ± adÄ±, e-posta ve ÅŸifre doÄŸrulama fonksiyonu
function validateUsername(username) {
    return /^[A-Za-z ]{3,}$/.test(username); // ðŸ”¹ Sadece harf ve boÅŸluk, en az 3 karakter
}

function validateEmail(email) {
    return /^[0-9]{9}@ogrenci\.amasya\.edu\.tr$/.test(email); // ðŸ”¹ 9 haneli sayÄ± + sabit domain
}

function validatePassword(password) {
    return password.length >= 6 && password.length <= 13; // ðŸ”¹ 6-13 karakter uzunluÄŸu
}

// ðŸ“Œ **KullanÄ±cÄ± KayÄ±t API**
app.post("/api/register", (req, res) => {
    const { username, email, password } = req.body;

    // ðŸ”¹ Alanlar boÅŸ mu kontrolÃ¼
    if (!username || !email || !password) {
        return res.status(400).json({ message: "LÃ¼tfen tÃ¼m alanlarÄ± doldurun!" });
    }

    // ðŸ”¹ KullanÄ±cÄ± adÄ± doÄŸrulama
    if (!validateUsername(username)) {
        return res.status(400).json({ message: "KullanÄ±cÄ± adÄ± en az 3 harf iÃ§ermeli ve Ã¶zel karakter iÃ§eremez!" });
    }

    // ðŸ”¹ E-posta doÄŸrulama
    if (!validateEmail(email)) {
        return res.status(400).json({ message: "E-posta yalnÄ±zca 9 rakamdan oluÅŸmalÄ± ve @ogrenci.amasya.edu.tr uzantÄ±sÄ± olmalÄ±!" });
    }

    // ðŸ”¹ Åžifre doÄŸrulama
    if (!validatePassword(password)) {
        return res.status(400).json({ message: "Åžifre en az 6, en fazla 13 karakter olmalÄ±dÄ±r!" });
    }

    // ðŸ”¹ Mevcut kullanÄ±cÄ±larÄ± oku
    let users = [];
    if (fs.existsSync(usersFile)) {
        const fileData = fs.readFileSync(usersFile, "utf-8");
        users = fileData ? JSON.parse(fileData) : [];
    }

    // ðŸ”¹ EÄŸer e-posta zaten kayÄ±tlÄ±ysa hata ver
    if (users.some(user => user.email === email)) {
        return res.status(400).json({ message: "Bu e-posta zaten kayÄ±tlÄ±!" });
    }

    // ðŸ”¹ Yeni kullanÄ±cÄ±yÄ± ekle
    users.push({ username, email, password });

    // ðŸ”¹ JSON dosyasÄ±na yaz
    fs.writeFileSync(usersFile, JSON.stringify(users, null, 2));

    res.status(201).json({ message: "KayÄ±t baÅŸarÄ±lÄ±!" });
});

// ðŸ“Œ **GiriÅŸ Yapma (Login)**
app.post("/api/login", async (req, res) => {
    const { email, password } = req.body;

    // ðŸ”¹ KullanÄ±cÄ±larÄ± dosyadan oku
    let users = [];
    if (fs.existsSync(usersFile)) {
        const fileData = fs.readFileSync(usersFile, "utf-8");
        users = fileData ? JSON.parse(fileData) : [];
    }

    // ðŸ”¹ KullanÄ±cÄ±yÄ± bul
    const user = users.find(user => user.email === email && user.password === password);
    if (!user) {
        return res.status(400).json({ message: "E-mail veya ÅŸifre hatalÄ±" });
    }

    // ðŸ”¹ JWT Token oluÅŸtur
    const token = jwt.sign(
        { username: user.username, email: user.email },
        process.env.JWT_SECRET || "secretKey",
        { expiresIn: "1h" }
    );

    res.json({ token, username: user.username });
});

// ðŸ“Œ **Sunucuyu BaÅŸlatma**
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server http://localhost:${PORT} portunda Ã§alÄ±ÅŸÄ±yor ðŸš€`));
